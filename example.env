# Database configuration using PostgreSQL. Easiest way to get an instance up and running is to use Supabase (https://supabase.com/).
DB_PROVIDER="postgresql"
DB_PRISMA_URL="" # Connection URL to database using a transaction pooler (if using supabase, make sure to append `?pgbouncer=true` to the end of the URL — have to do this since we're using Prisma). Found under 'Transaction Pooler' in the Supabase dashboard.
DB_DIRECT_URL="" # Connection URL to database without a transaction pooler. Found under 'Direct Connection' in the Supabase dashboard.
DB_USER="" # Database user — not necessary if using above connection URLs. If not, then you might have to update the Prisma datasource in `src/prisma/schema.prisma` — but you should be connecting via the above URLs.
DB_HOST="" # Database host — same as above
DB_PASSWORD="" # Database password — same as above
DB_NAME="" # Database name — same as above

# Auth configuration
# When running locally, you'll want to generate a secret here: https://generate-secret.vercel.app/32
NEXTAUTH_SECRET=""

AUTH_TYPE="email" # Used to allow either "email" or "password", but only "email" is currently supported. "email" uses magic links to login, so you'll also need to provide SMTP credentials below. "password" just uses a password to login.

# Email Configuration (No SMTP) — SMTP is pretty unreliable (even with Promises) using NextJS on Vercel (just due to the nature of how serverless applications work), so I switched to sending emails over HTTP
# If you want to run the app locally, then you're still able to use SMTP reliably, and you can ignore these instructions and skip to SMTP configuration below.
# To send emails over HTTP, you must provide your Resend API Key in the EMAIL_PASSWORD field below.
# NOTE: By default, if you're running the app in a development environment the email provider will send magic links over SMTP instead of HTTP, meaning you need to complete the SMTP configuration below.

# SMTP configuration — used to send magic links for email login. Easiest way to set up is to use Resend (https://resend.com/). Could use Gmail, but you'll have to enable 'Less secure app access' in your Google account settings, which is not recommended (and kind of annoying to do).
EMAIL_SERVER="" # SMTP server URL. Follow the onboarding instructions from Resend to get this (no need to connect domain either). Make sure the port number is 587 (should be default I think?).
EMAIL_USERNAME="" # SMTP username. Found in "Settings" -> "SMTP" on Resend. For other services, this should be self-explanatory
EMAIL_PASSWORD="" # SMTP password. If using Resend, this is your API key (must have sending access). For other services, this should be self-explanatory
EMAIL_FROM="Display Name <email@domain.com>" # Email address / name to send emails from (again these are verification links, so probably do something like support@your_domain.com). For Resend, just use the onboarding email address they gave you if you haven't connected a domain.
EMAIL_PORT=587 # SMTP port number. Nodemailer seems to play the nicest with 587, so that's the default here.

